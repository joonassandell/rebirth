@use '../../mixins' as *;

.grid {
  --grid-gap: var(--grid-gap-m);
  display: grid;
  gap: var(--grid-gap);
  grid-template-columns: repeat(12, 1fr);

  > * {
    --grid-span: 12;
    grid-column: span var(--grid-span, 12) / span var(--grid-span, 12);
  }

  @include mq($until: xs) {
    column-gap: var(--grid-gap-s);
  }
}

/* ======
 * Sizing & Layout
 * ====== */

.grid {
  &.-auto {
    grid-template-columns: repeat(auto-fit, minmax(0, 1fr));

    > * {
      --grid-span: span;
    }
  }

  &.-gap\:xl {
    @include mq(m) {
      --grid-gap: var(--grid-gap-xl);
    }
  }

  &.-gap\:l {
    @include mq(m) {
      --grid-gap: var(--grid-gap-l);
    }
  }

  &.-gap\:s {
    --grid-gap: var(--grid-gap-s);
  }

  &.-gap\:0 {
    --grid-gap: 0;
  }
}

/* ======
 * Columns
 * ====== */

@mixin gridColumns($breakpoint: null) {
  $breakpoint: if($breakpoint, \@#{$breakpoint}, null);

  @for $i from 1 through 12 {
    .grid-col#{$i}#{$breakpoint} {
      --grid-span: #{$i};
    }

    // .grid-col.-start#{$i}#{$breakpoint} {
    //   grid-column-start: #{$i};
    // }

    // .grid-col.-end#{$i + 1}#{$breakpoint} {
    //   grid-column-end: #{$i + 1};
    // }
  }
}

// .grid-col.-start {
//   grid-column-start: 1;
// }

// .grid-col.-end {
//   grid-column-end: -1;
// }

@include gridColumns();

@include mq(m) {
  @include gridColumns(m);
}

@include mq(l) {
  @include gridColumns(l);
}

@include mq(xl) {
  @include gridColumns(xl);
}
