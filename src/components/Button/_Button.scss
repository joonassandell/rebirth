/* =======================================
 * Button
 * ======================================= */

%Button,
.Button {
  @include fontSize($Button-fontSize, rem(($Button-height) - ($Button-borderWidth * 2)));
  align-items: center;
  background-color: transparent;
  border: $Button-borderWidth solid transparent;
  border-radius: $borderRadius;
  cursor: pointer;
  display: inline-flex;
  font-weight: $Button-fontWeight;
  margin-bottom: rem($space);
  margin-right: rem($space / 2);
  justify-content: center;
  outline: 0;
  padding: 0 rem($space);
  position: relative;
  text-align: center;
  transition: background-color $transitionDuration,
              border-color $transitionDuration,
              color $transitionDuration;
  user-select: none;
  vertical-align: top;

  &:hover,
  &:focus {
    text-decoration: none;
  }
}

.Button-dropdown {
  @include dropdown($arrow: false);

  .Button.is-open & {
    @include dropdown($state: 'is-open');
  }
}

.Button-text {
  pointer-events: none;

  + .Button-icon {
    margin-left: rem($space / 2);
  }
}

.Button-icon {
  align-items: center;
  display: inline-flex;
  justify-content: center;
  pointer-events: none;

  + .Button-text {
    margin-left: rem($space / 2);
  }
}


/* ======
 * Button - States
 * ====== */

.Button {
  &.is-disabled, &[disabled] {
    @include disabled();
  }

  &.is-open {
    overflow: visible;
  }
}


/* ======
 * Button - Sizing
 * ====== */

.Button {
  &.-l {
    @include fontSize($fontSize-l, rem(($Button-height * $Button-l) - ($Button-borderWidth * 2)));
    padding: 0 rem($space * $Button-l);
  }

  &.-s {
    @include fontSize($fontSize-s, rem(($Button-height * $Button-s) - ($Button-borderWidth * 2)));
    padding: 0 rem($space * $Button-s);
  }

  &.-full {
    width: 100%;
  }

  &.-block {
    height: rem($space * 2);
    width: rem($space * 2);
  }
}
